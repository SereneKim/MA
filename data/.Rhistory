summary(model3)
ranova(model3)
abs2b$Scenario <- as.factor(abs2b$Scenario)
model4 <- lmer(formula = Probability_mean ~ 1 + Cohort+ (1 | Scenario), data=abs2b, REML = TRUE)
anova(model4)
summary(model4)
ranova(model4)
rm(list=ls())
library(dplyr)
library(car)
library(tibble)
library(MASS)
library(lme4)
require(GGally)
# install.packages("brms")
library(brms)
library(purrr)
# library(nlme)
library(lmerTest)
setwd("/Users/serenekim/Desktop/Thesis_SeorinKim/MasterThesis_Seorin_Kim/data")
abs1 <- read.csv('absolute_measure1.csv', header = T)
abs2 <- read.csv('absolute_measure2.csv', header = T)
abs1_ex <- read.csv('absolute_measure1_all.csv', header = T)  %>% filter(Scenario >=4)
abs2_ex <- read.csv('absolute_measure2_all.csv', header = T)  %>% filter(Scenario >=4)
abs1b <- read.csv('absolute_measure1_sum.csv', header = T)
abs2b <- read.csv('absolute_measure2_sum.csv', header = T)
abs1b_ex <- read.csv('absolute_measure1_sum_all.csv', header = T) %>% filter(Scenario >=4)
abs2b_ex <- read.csv('absolute_measure2_sum_all.csv', header = T) %>% filter(Scenario >=4)
# Compare 3 scenarios
compare3 <-  function(abs1){
output <- list()
for (i in unique(abs1$Cohort)) {
df <- abs1 %>% filter(Cohort == i)
df$Scenario <- as.factor(df$Scenario)
# Check if there are at least two levels in the Scenario variable for the current cohort
if (length(unique(df$Scenario)) > 2 & length(unique(df$Replication)) > 7) {
# Fit the linear model
mod <- lm(Probability ~ 1 + Scenario, data=df)
# Perform ANOVA on the linear model
anova1 <- aov(mod)
anova1_summary <- summary(anova1)
# Store the summary in the output list with the cohort as the key
output[[as.character(i)]] <- anova1_summary
} else {
message(paste("Cohort", i, "has less than two levels in the Scenario variable and not enough replications. Skipping."))
}
}
return(output)
}
abs1 <- na.omit(abs1)
abs2 <- na.omit(abs2)
sum_abs1 <- compare3(abs1)
sum_abs2 <- compare3(abs2)
compare2 <- function(abs1){
output <- list()
for (i in unique(abs1$Cohort)) {
df <- abs1 %>% filter(Cohort == i & Scenario != 1)
df$Scenario <- as.factor(df$Scenario)
# Check if there are at least two levels in the Scenario variable for the current cohort
if (length(unique(df$Scenario)) >= 2 & length(unique(df$Replication)) > 7) {
# Fit the linear model
mod <- lm(Probability ~ 1 + Scenario, data=df)
# Perform ANOVA on the linear model
anova1 <- aov(mod)
anova1_summary <- summary(anova1)
# Store the summary in the output list with the cohort as the key
output[[as.character(i)]] <- anova1_summary
} else {
message(paste("Cohort", i, "has less than two levels in the Scenario variable and not enough replications. Skipping."))
}
}
return(output)
}
sum2_abs1 <- compare2(abs1)
sum2_abs2 <- compare2(abs2)
# Between Extreme Cases: More distinct! More significantly!
abs1_ex <- na.omit(abs1_ex)
abs2_ex <- na.omit(abs2_ex)
sum_abs1_ex <- compare2(abs1_ex)
sum_abs2_ex <- compare2(abs2_ex)
sum_abs1_ex
sum_abs2_ex
abs1b_ex$Scenario <- as.factor(abs1b_ex$Scenario)
# Extreme cases
model1 <- lmer(formula = Probability_mean ~ 1 + Cohort + (1 | Scenario), data=abs1b_ex, REML = TRUE)
ranova(model1)
abs2b_ex$Scenario <- as.factor(abs2b_ex$Scenario)
model2 <- lmer(formula = Probability_mean ~ 1 + Cohort + (1 | Scenario), data=abs2b_ex, REML = TRUE)
ranova(model2)
sum_abs1
sum_abs2
sum2_abs1
sum2_abs2
sum2_abs1
sum2_abs1
sum2_abs2
# Between 3 Scenarios
# Singular
abs1b$Scenario <- as.factor(abs1b$Scenario)
model3 <- lmer(formula = Probability_mean ~ 1 + Cohort + (1 | Scenario), data=abs1b, REML = TRUE)
ranova(model3)
abs2b$Scenario <- as.factor(abs2b$Scenario)
model4 <- lmer(formula = Probability_mean ~ 1 + Cohort + (1 | Scenario), data=abs2b, REML = TRUE)
ranova(model4)
rm(list=ls())
setwd("/Users/serenekim/Desktop/Thesis_SeorinKim/MasterThesis_Seorin_Kim/data")
abs1 <- read.csv('absolute_measure1_uf05.csv', header = T)
abs2 <- read.csv('absolute_measure2_uf05.csv', header = T)
abs1b <- read.csv('absolute_measure1_sum_uf05.csv', header = T)
abs2b <- read.csv('absolute_measure2_sum_uf05.csv', header = T)
# Compare 3 scenarios
compare3 <-  function(abs1){
output <- list()
for (i in unique(abs1$Cohort)) {
df <- abs1 %>% filter(Cohort == i)
df$Scenario <- as.factor(df$Scenario)
# Check if there are at least two levels in the Scenario variable for the current cohort
if (length(unique(df$Scenario)) > 2 & length(unique(df$Replication)) > 7) {
# Fit the linear model
mod <- lm(Probability ~ 1 + Scenario, data=df)
# Perform ANOVA on the linear model
anova1 <- aov(mod)
anova1_summary <- summary(anova1)
# Store the summary in the output list with the cohort as the key
output[[as.character(i)]] <- anova1_summary
} else {
message(paste("Cohort", i, "has less than two levels in the Scenario variable and not enough replications. Skipping."))
}
}
return(output)
}
sum_abs1 <- compare3(abs1)
sum_abs2 <- compare3(abs2)
compare2 <- function(abs1){
output <- list()
for (i in unique(abs1$Cohort)) {
df <- abs1 %>% filter(Cohort == i & Scenario != 1)
df$Scenario <- as.factor(df$Scenario)
# Check if there are at least two levels in the Scenario variable for the current cohort
if (length(unique(df$Scenario)) >= 2 & length(unique(df$Replication)) > 7) {
# Fit the linear model
mod <- lm(Probability ~ 1 + Scenario, data=df)
# Perform ANOVA on the linear model
anova1 <- aov(mod)
anova1_summary <- summary(anova1)
# Store the summary in the output list with the cohort as the key
output[[as.character(i)]] <- anova1_summary
} else {
message(paste("Cohort", i, "has less than two levels in the Scenario variable and not enough replications. Skipping."))
}
}
return(output)
}
sum2_abs1 <- compare2(abs1)
sum2_abs2 <- compare2(abs2)
sum_abs1
sum_abs2
compare2 <- function(abs1){
output <- list()
for (i in unique(abs1$Cohort)) {
df <- abs1 %>% filter(Cohort == i & Scenario != 1)
df$Scenario <- as.factor(df$Scenario)
# Check if there are at least two levels in the Scenario variable for the current cohort
if (length(unique(df$Scenario)) >= 2 & length(unique(df$Replication)) > 7) {
# Fit the linear model
mod <- lm(Probability ~ 1 + Scenario, data=df)
# Perform ANOVA on the linear model
anova1 <- aov(mod)
anova1_summary <- summary(anova1)
# Store the summary in the output list with the cohort as the key
output[[as.character(i)]] <- anova1_summary
} else {
message(paste("Cohort", i, "has less than two levels in the Scenario variable and not enough replications. Skipping."))
}
}
return(output)
}
sum2_abs1 <- compare2(abs1)
sum2_abs2 <- compare2(abs2)
sum2_abs1
sum2_abs2
sum_abs1
sum_abs2
rm(list=ls())
setwd("/Users/serenekim/Desktop/Thesis_SeorinKim/MasterThesis_Seorin_Kim/data")
abs1 <- read.csv('absolute_measure1_child3.csv', header = T)
abs2 <- read.csv('absolute_measure2_child3.csv', header = T)
abs1b <- read.csv('absolute_measure1_sum_child3.csv', header = T)
abs2b <- read.csv('absolute_measure2_sum_child3.csv', header = T)
abs1 <- na.omit(abs1)
abs2 <- na.omit(abs2)
# Compare 3 scenarios
compare3 <-  function(abs1){
output <- list()
for (i in unique(abs1$Cohort)) {
df <- abs1 %>% filter(Cohort == i)
df$Scenario <- as.factor(df$Scenario)
# Check if there are at least two levels in the Scenario variable for the current cohort
if (length(unique(df$Scenario)) > 2 & length(unique(df$Replication)) > 7) {
# Fit the linear model
mod <- lm(Probability ~ 1 + Scenario, data=df)
# Perform ANOVA on the linear model
anova1 <- aov(mod)
anova1_summary <- summary(anova1)
# Store the summary in the output list with the cohort as the key
output[[as.character(i)]] <- anova1_summary
} else {
message(paste("Cohort", i, "has less than two levels in the Scenario variable and not enough replications. Skipping."))
}
}
return(output)
}
sum_abs1 <- compare3(abs1)
sum_abs2 <- compare3(abs2)
compare2 <- function(abs1){
output <- list()
for (i in unique(abs1$Cohort)) {
df <- abs1 %>% filter(Cohort == i & Scenario != 1)
df$Scenario <- as.factor(df$Scenario)
# Check if there are at least two levels in the Scenario variable for the current cohort
if (length(unique(df$Scenario)) >= 2 & length(unique(df$Replication)) > 7) {
# Fit the linear model
mod <- lm(Probability ~ 1 + Scenario, data=df)
# Perform ANOVA on the linear model
anova1 <- aov(mod)
anova1_summary <- summary(anova1)
# Store the summary in the output list with the cohort as the key
output[[as.character(i)]] <- anova1_summary
} else {
message(paste("Cohort", i, "has less than two levels in the Scenario variable and not enough replications. Skipping."))
}
}
return(output)
}
sum2_abs1 <- compare2(abs1)
sum2_abs2 <- compare2(abs2)
sum_abs1
sum_abs2
sum2_abs1
sum2_abs2
abs1b$Scenario <- as.factor(abs1b$Scenario)
model3 <- lmer(formula = Probability_mean ~ 1 + Cohort+(1 | Scenario), data=abs1b, REML = TRUE)
ranova(model3)
# Singular
abs2b$Scenario <- as.factor(abs2b$Scenario)
model4 <- lmer(formula = Probability_mean ~ 1 + Cohort+ (1 | Scenario), data=abs2b, REML = TRUE)
ranova(model4)
rm(list=ls())
# Data -------------------------------------------------------------------
setwd("/Users/serenekim/Desktop/Thesis_SeorinKim/MasterThesis_Seorin_Kim/data")
folder_path = "/Users/serenekim/Desktop/Thesis_SeorinKim/MasterThesis_Seorin_Kim/data"
file_list <- list.files(path = folder_path, pattern = "^s\\d+r\\d+_analysis\\.csv$", full.names = TRUE)
data_all <- lapply(file_list, read.csv)
# Combine all data frames into a single list
df_all <- reduce(data_all[1:30], rbind)
df_extreme <- reduce(data_all[31:50], rbind)
s1 <- df_all %>% filter(Scenario == 1 & Generation != 1)
s2 <- df_all %>% filter(Scenario == 2 & Generation != 1)
s3 <- df_all %>% filter(Scenario == 3 & Generation != 1)
s4 <- df_extreme %>% filter(Scenario == 4 & Generation != 1)
s5 <- df_extreme %>% filter(Scenario == 5 & Generation != 1)
# Get Maximum Education of Parents
max_parents <- function(data){
for (i in 1:length(data$X)){
data$Max_Parents[i] <- max(data$Father_Edu[i], data$Mother_Edu[i])
data$Max_Cult_P[i] <- max(data$Father_Cultural[i], data$Mother_Cultural[i])
}
return(data)
}
s1 <- max_parents(s1)
s2 <- max_parents(s2)
s3 <- max_parents(s3)
s4 <- max_parents(s4)
s5 <- max_parents(s5)
calculate_meanrank <- function(input_data) {
output_df <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(output_df) <- c("Mean Rank", "Var Rank", "Total", "Replication", "Cohort")
for (i in 1:10){
df = input_data %>% filter(Replication == i)
for (j in unique(df$Cohort)){
df2 = df %>% filter(Cohort == j) %>% filter(rank(Max_Cult_P) < median(rank(Max_Cult_P)))
count = df2 %>% summarise(n = n())
rk = rank(df2$Cultural)
rank_df <- data.frame(data.frame(mean(rk), var(rk), count))
rank_df$Replication <- i  # Add the replication number 'i'
rank_df$Cohort <- j  # Add the cohort number 'j'
output_df <- rbind(output_df, rank_df)  # Append the row to the output dataframe
}}
# sample <- output_df %>% filter(Cohort <= 55)
# tb <- sample %>% group_by(Cohort) %>% summarise(
#   MM_Rank = mean(mean.rk.),
#   MV_Rank  = mean(var.rk.),
#   Mean_Total = mean(n),
#   VM_Rank = var(mean.rk.),
#   Var_Total = var(n),
#   Mean_Perc = mean(mean.rk. / n)
# )
return(output_df)
}
# Use the function with different data frames
result2_s1 <- calculate_meanrank(s1)
result2_s2 <- calculate_meanrank(s2)
result2_s3 <- calculate_meanrank(s3)
result2_s4 <- calculate_meanrank(s4)
result2_s5 <- calculate_meanrank(s5)
df2 <- rbind(
data.frame(Scenario = "Scenario 1", Cohort = result2_s1$Cohort, Mean_Rank = result2_s1$mean.rk., Var_Rank = result2_s1$var.rk., Total = result2_s1$n, Perc = result2_s1$mean.rk./result2_s1$n),
data.frame(Scenario = "Scenario 2", Cohort = result2_s2$Cohort, Mean_Rank = result2_s2$mean.rk., Var_Rank = result2_s2$var.rk., Total = result2_s2$n, Perc = result2_s2$mean.rk./result2_s2$n),
data.frame(Scenario = "Scenario 3", Cohort = result2_s3$Cohort, Mean_Rank = result2_s3$mean.rk., Var_Rank = result2_s3$var.rk., Total = result2_s3$n, Perc = result2_s3$mean.rk./result2_s3$n)
)
df2_ex <- rbind(
data.frame(Scenario = "True Homogamy", Cohort = result2_s4$Cohort, Mean_Rank = result2_s4$mean.rk., Var_Rank = result2_s4$var.rk., Total = result2_s4$n, Perc = result2_s4$mean.rk./result2_s4$n),
data.frame(Scenario = "True Heterogamy", Cohort = result2_s5$Cohort, Mean_Rank = result2_s5$mean.rk., Var_Rank = result2_s5$var.rk., Total = result2_s5$n, Perc = result2_s5$mean.rk./result2_s5$n)
)
t4_1 <- result2_s4 %>% filter(result2_s4$Cohort <= 20)
t5_1 <- result2_s5 %>% filter(result2_s5$Cohort <= 20)
t.test(t4_1$mean.rk., t5_1$mean.rk., var.equal = FALSE) #p-value = 2.688e-05
t.test(t4_1$mean.rk., t5_1$mean.rk., var.equal = TRUE) #p-value = 2.688e-05
ggplot(result2_s4, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
library(dplyr)
library(car)
library(tibble)
library(MASS)
library(lme4)
require(GGally)
# install.packages("brms")
library(brms)
library(purrr)
library(Hmisc)
library(foreign)
library(ggplot2)
library(ggforce)
ggplot(result2_s4, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
ggplot(result2_s5, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
ggplot(result2_s3, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
ggplot(result2_s2, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
# Per Scenario (Zoomed Plots)
ggplot(result2_s1, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
t.test(t4_1$mean.rk., t5_1$mean.rk., var.equal = FALSE) #p-value = 2.688e-05
t2_1 <- result2_s2 %>% filter(result2_s2$Cohort <= 20)
t3_1 <- result2_s3 %>% filter(result2_s3$Cohort <= 20)
t.test(t2_1$mean.rk., t3_1$mean.rk., var.equal = TRUE)
# Per Scenario (Zoomed Plots)
ggplot(result2_s1, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#EF553B') +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
# Per Scenario (Zoomed Plots)
ggplot(result2_s1, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#EF553B') +
geom_point(aes(alpha=0.5, color = '#EF553B')) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
ggplot(result2_s1, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#EF553B') +
geom_point(aes(alpha=0.5, color = '#EF553B')) +
labs(x = "Cohort", y = "Mean Rank",  title = "Scenario 1") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
ggplot(result2_s2, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#636EFA') +
geom_point(aes(alpha=0.5, color = '#636EFA')) +
labs(x = "Cohort", y = "Mean Rank", title = "Scenario 2") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
ggplot(result2_s2, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#636EFA') +
geom_point(aes(alpha=0.5, color = '#636EFA')) +
labs(x = "Cohort", y = "Mean Rank", title = "Scenario 2") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
ggplot(result2_s2, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#636EFA') +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank", title = "Scenario 2") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
o
ggplot(result2_s2, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#636EFA') +
geom_point(aes(alpha=0.5),color = '#636EFA' ) +
labs(x = "Cohort", y = "Mean Rank", title = "Scenario 2") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
ggplot(result2_s3, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#00CC96') +
geom_point(aes(alpha=0.5), color = '#00CC96') +
labs(x = "Cohort", y = "Mean Rank", title = 'Scenario 3') +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
# Per Scenario (Zoomed Plots)
png(filename = "rank_scens_1.png", width = 800, res = 100)
ggplot(result2_s1, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#EF553B') +
geom_point(aes(alpha=0.5, color = '#EF553B')) +
labs(x = "Cohort", y = "Mean Rank",  title = "Scenario 1") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
dev.off()
png(filename = "rank_scens_2.png", width = 800, res = 100)
ggplot(result2_s2, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#636EFA') +
geom_point(aes(alpha=0.5), color = '#636EFA') +
labs(x = "Cohort", y = "Mean Rank", title = "Scenario 2") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
dev.off()
png(filename = "rank_scens_3.png", width = 800, res = 100)
ggplot(result2_s3, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#00CC96') +
geom_point(aes(alpha=0.5), color = '#00CC96') +
labs(x = "Cohort", y = "Mean Rank", title = 'Scenario 3') +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
dev.off()
ggplot(result2_s4, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
ggplot(result2_s5, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess") +
geom_point(aes(alpha=0.5)) +
labs(x = "Cohort", y = "Mean Rank") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme(legend.position="none")
ggplot(result2_s4, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#EF553B') +
geom_point(aes(alpha=0.5), color = '#EF553B') +
labs(x = "Cohort", y = "Mean Rank", title = "True Homogamy") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
ggplot(result2_s5, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#636EFA') +
geom_point(aes(alpha=0.5), color = '#636EFA') +
labs(x = "Cohort", y = "Mean Rank", title = "True Heterogamy") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
png(filename = "rank_scens_hetero.png", width = 800, res = 100)
ggplot(result2_s5, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#636EFA') +
geom_point(aes(alpha=0.5), color = '#636EFA') +
labs(x = "Cohort", y = "Mean Rank", title = "True Heterogamy") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
dev.off()
png(filename = "rank_scens_homo.png", width = 800, res = 100)
ggplot(result2_s4, aes(x = Cohort, y= mean.rk./n)) +
geom_smooth( method = "loess", color = '#EF553B') +
geom_point(aes(alpha=0.5), color = '#EF553B') +
labs(x = "Cohort", y = "Mean Rank", title = "True Homogamy") +
facet_zoom( xlim = c(0, 40), ylim = c(0.5, 0.6)) +
theme_light() + theme(legend.position="none")
dev.off()
rm(list=ls())
library(dplyr)
library(car)
library(tibble)
library(MASS)
library(lme4)
require(GGally)
# install.packages("brms")
library(brms)
library(purrr)
library(Hmisc)
library(foreign)
library(ggplot2)
library(ggforce)
# Data -------------------------------------------------------------------
setwd("/Users/serenekim/Desktop/Thesis_SeorinKim/MasterThesis_Seorin_Kim/data")
folder_path = "/Users/serenekim/Desktop/Thesis_SeorinKim/MasterThesis_Seorin_Kim/data"
file_list <- list.files(path = folder_path, pattern = "^s\\d+r\\d+_child3_analysis\\.csv$", full.names = TRUE)
data_all <- lapply(file_list, read.csv)
# Combine all data frames into a single list
df_all <- reduce(data_all[1:30], rbind)
s1 <- df_all %>% filter(Scenario == 1 & Generation != 1)
s2 <- df_all %>% filter(Scenario == 2 & Generation != 1)
s3 <- df_all %>% filter(Scenario == 3 & Generation != 1)
